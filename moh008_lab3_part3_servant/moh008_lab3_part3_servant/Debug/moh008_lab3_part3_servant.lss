
moh008_lab3_part3_servant.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000424  000004b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800112  00800112  000004ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000053c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc2  00000000  00000000  000005bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000945  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060f  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ce  00000000  00000000  00002823  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000029f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	ea c0       	rjmp	.+468    	; 0x20a <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	23 c1       	rjmp	.+582    	; 0x294 <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 35       	cpi	r26, 0x54	; 84
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	f7 d0       	rcall	.+494    	; 0x2b2 <main>
  c4:	ad c1       	rjmp	.+858    	; 0x420 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	11 f0       	breq	.+4      	; 0xd0 <SMTick1+0x8>
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	39 f4       	brne	.+14     	; 0xde <SMTick1+0x16>
  d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <output1>
  d4:	80 95       	com	r24
  d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <output1>
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	08 95       	ret

000000e0 <SMTick2>:
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	11 f0       	breq	.+4      	; 0xe8 <SMTick2+0x8>
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	39 f4       	brne	.+14     	; 0xf6 <SMTick2+0x16>
  e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <output2>
  ec:	80 95       	com	r24
  ee:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <output2>
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	08 95       	ret

000000f8 <SMTick3>:
  f8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <state3>
  fc:	88 23       	and	r24, r24
  fe:	11 f0       	breq	.+4      	; 0x104 <SMTick3+0xc>
 100:	81 11       	cpse	r24, r1
 102:	0b c0       	rjmp	.+22     	; 0x11a <SMTick3+0x22>
 104:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <output3>
 108:	91 30       	cpi	r25, 0x01	; 1
 10a:	21 f4       	brne	.+8      	; 0x114 <SMTick3+0x1c>
 10c:	90 e8       	ldi	r25, 0x80	; 128
 10e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <output3>
 112:	03 c0       	rjmp	.+6      	; 0x11a <SMTick3+0x22>
 114:	96 95       	lsr	r25
 116:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <output3>
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	08 95       	ret

0000011e <SMTick4>:
 11e:	00 97       	sbiw	r24, 0x00	; 0
 120:	11 f0       	breq	.+4      	; 0x126 <SMTick4+0x8>
 122:	00 97       	sbiw	r24, 0x00	; 0
 124:	79 f4       	brne	.+30     	; 0x144 <SMTick4+0x26>
 126:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 12a:	80 38       	cpi	r24, 0x80	; 128
 12c:	31 f4       	brne	.+12     	; 0x13a <SMTick4+0x1c>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
 13a:	88 0f       	add	r24, r24
 13c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	08 95       	ret

00000146 <SMTick5>:
 146:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <state>
 14a:	22 23       	and	r18, r18
 14c:	11 f0       	breq	.+4      	; 0x152 <SMTick5+0xc>
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	31 f5       	brne	.+76     	; 0x19e <SMTick5+0x58>
 152:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <receivedData>
 156:	82 95       	swap	r24
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	31 f4       	brne	.+12     	; 0x16a <SMTick5+0x24>
 15e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <output1>
 162:	8b b9       	out	0x0b, r24	; 11
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
 16a:	82 30       	cpi	r24, 0x02	; 2
 16c:	31 f4       	brne	.+12     	; 0x17a <SMTick5+0x34>
 16e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <output2>
 172:	8b b9       	out	0x0b, r24	; 11
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
 17a:	83 30       	cpi	r24, 0x03	; 3
 17c:	31 f4       	brne	.+12     	; 0x18a <SMTick5+0x44>
 17e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <output3>
 182:	8b b9       	out	0x0b, r24	; 11
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	31 f4       	brne	.+12     	; 0x19a <SMTick5+0x54>
 18e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 192:	8b b9       	out	0x0b, r24	; 11
 194:	80 e0       	ldi	r24, 0x00	; 0
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	08 95       	ret
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	08 95       	ret

000001a0 <TimerSet>:
 1a0:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <_avr_timer_M>
 1a4:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <_avr_timer_M+0x1>
 1a8:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <_avr_timer_M+0x2>
 1ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <_avr_timer_M+0x3>
 1b0:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <_avr_timer_cntcurr>
 1b4:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <_avr_timer_cntcurr+0x1>
 1b8:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <_avr_timer_cntcurr+0x2>
 1bc:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <_avr_timer_cntcurr+0x3>
 1c0:	08 95       	ret

000001c2 <TimerOn>:
 1c2:	8b e0       	ldi	r24, 0x0B	; 11
 1c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1c8:	8d e7       	ldi	r24, 0x7D	; 125
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1d0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1d4:	82 e0       	ldi	r24, 0x02	; 2
 1d6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1da:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1de:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 1e6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 1ea:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 1ee:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 1f2:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 1f6:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 1fa:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 1fe:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
 202:	8f b7       	in	r24, 0x3f	; 63
 204:	80 68       	ori	r24, 0x80	; 128
 206:	8f bf       	out	0x3f, r24	; 63
 208:	08 95       	ret

0000020a <__vector_13>:
}

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	8f 93       	push	r24
 216:	9f 93       	push	r25
 218:	af 93       	push	r26
 21a:	bf 93       	push	r27
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
 21c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_avr_timer_cntcurr>
 220:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_avr_timer_cntcurr+0x1>
 224:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_avr_timer_cntcurr+0x2>
 228:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_avr_timer_cntcurr+0x3>
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	a1 09       	sbc	r26, r1
 230:	b1 09       	sbc	r27, r1
 232:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 236:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 23a:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 23e:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
 242:	89 2b       	or	r24, r25
 244:	8a 2b       	or	r24, r26
 246:	8b 2b       	or	r24, r27
 248:	99 f4       	brne	.+38     	; 0x270 <__vector_13+0x66>
void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}

void TimerISR() {
	TimerFlag = 1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <TimerFlag>
{
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
		TimerISR(); 				// Call the ISR that the user uses
		_avr_timer_cntcurr = _avr_timer_M;
 250:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_avr_timer_M>
 254:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <_avr_timer_M+0x1>
 258:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <_avr_timer_M+0x2>
 25c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <_avr_timer_M+0x3>
 260:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <_avr_timer_cntcurr>
 264:	90 93 4b 01 	sts	0x014B, r25	; 0x80014b <_avr_timer_cntcurr+0x1>
 268:	a0 93 4c 01 	sts	0x014C, r26	; 0x80014c <_avr_timer_cntcurr+0x2>
 26c:	b0 93 4d 01 	sts	0x014D, r27	; 0x80014d <_avr_timer_cntcurr+0x3>
	}
}
 270:	bf 91       	pop	r27
 272:	af 91       	pop	r26
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <SPI_ServantInit>:
//Servant code
void SPI_ServantInit(void){
	//set DDRB to have MISO line as output and MOSI, SCK, and SS as input
	// set SPCR register to enable SPI and enable SPI interrupt (pg. 168)
	// make sure global interrupts are enabled on SREG register (pg.9)
	DDRB = 0x40;	// 0100 0000 output
 282:	80 e4       	ldi	r24, 0x40	; 64
 284:	84 b9       	out	0x04, r24	; 4
	PORTB = 0xB0;	// 1011 0000 input
 286:	80 eb       	ldi	r24, 0xB0	; 176
 288:	85 b9       	out	0x05, r24	; 5
	SPCR = 0xC0;	// 1100 0000
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	8c bd       	out	0x2c, r24	; 44
	SREG = 0x80;	// 1000 0000
 28e:	80 e8       	ldi	r24, 0x80	; 128
 290:	8f bf       	out	0x3f, r24	; 63
 292:	08 95       	ret

00000294 <__vector_19>:
}
ISR(SPI_STC_vect){
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
	// this is enabled in init with the SPCR register's "SPI Interrupt Enable"
	// SPDR contains the received data, e.g. unsigned char receivedData = SPDR;
	receivedData = SPDR;
 2a0:	8e b5       	in	r24, 0x2e	; 46
 2a2:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <receivedData>
}
 2a6:	8f 91       	pop	r24
 2a8:	0f 90       	pop	r0
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	0f 90       	pop	r0
 2ae:	1f 90       	pop	r1
 2b0:	18 95       	reti

000002b2 <main>:
	}
	return state5;
};

int main(void)
{
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	cd b7       	in	r28, 0x3d	; 61
 2b8:	de b7       	in	r29, 0x3e	; 62
 2ba:	2a 97       	sbiw	r28, 0x0a	; 10
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRD = 0xFF; PORTD = 0x00; // These are the LEDs.
 2c6:	8f ef       	ldi	r24, 0xFF	; 255
 2c8:	8a b9       	out	0x0a, r24	; 10
 2ca:	1b b8       	out	0x0b, r1	; 11
	//DDRA = 0x0F; PORTA = 0xF0;
	
	//Tasks
	
		//Recalculate GCD periods for scheduler
		unsigned long int SMTick1_period = receivedData & 0x0F;
 2cc:	40 91 49 01 	lds	r20, 0x0149	; 0x800149 <receivedData>
 2d0:	4f 70       	andi	r20, 0x0F	; 15
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	70 e0       	ldi	r23, 0x00	; 0
		unsigned long int SMTick3_period = receivedData & 0x0F;
		unsigned long int SMTick4_period = receivedData & 0x0F;
		unsigned long int SMTick5_period = receivedData & 0x0F;
		
	static task task1, task2, task3, task4, task5; 
	task* tasks[] = {&task1, &task2, &task3, &task4, &task5};
 2d8:	8a e0       	ldi	r24, 0x0A	; 10
 2da:	e8 e0       	ldi	r30, 0x08	; 8
 2dc:	f1 e0       	ldi	r31, 0x01	; 1
 2de:	de 01       	movw	r26, r28
 2e0:	11 96       	adiw	r26, 0x01	; 1
 2e2:	01 90       	ld	r0, Z+
 2e4:	0d 92       	st	X+, r0
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x30>
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);

	// Task 1
	task1.state = SM1_Write;//Task initial state.
 2ea:	ee e3       	ldi	r30, 0x3E	; 62
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	10 82       	st	Z, r1
	task1.period = SMTick1_period;//Task Period.
 2f0:	41 83       	std	Z+1, r20	; 0x01
 2f2:	52 83       	std	Z+2, r21	; 0x02
 2f4:	63 83       	std	Z+3, r22	; 0x03
 2f6:	74 83       	std	Z+4, r23	; 0x04
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 2f8:	45 83       	std	Z+5, r20	; 0x05
 2fa:	56 83       	std	Z+6, r21	; 0x06
 2fc:	67 83       	std	Z+7, r22	; 0x07
 2fe:	70 87       	std	Z+8, r23	; 0x08
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 300:	84 e6       	ldi	r24, 0x64	; 100
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	92 87       	std	Z+10, r25	; 0x0a
 306:	81 87       	std	Z+9, r24	; 0x09
	
	// Task 2
	task2.state = SM2_Write;//Task initial state.
 308:	e3 e3       	ldi	r30, 0x33	; 51
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	10 82       	st	Z, r1
	task2.period = SMTick2_period;//Task Period.
 30e:	41 83       	std	Z+1, r20	; 0x01
 310:	52 83       	std	Z+2, r21	; 0x02
 312:	63 83       	std	Z+3, r22	; 0x03
 314:	74 83       	std	Z+4, r23	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 316:	45 83       	std	Z+5, r20	; 0x05
 318:	56 83       	std	Z+6, r21	; 0x06
 31a:	67 83       	std	Z+7, r22	; 0x07
 31c:	70 87       	std	Z+8, r23	; 0x08
	task2.TickFct = &SMTick2;//Function pointer for the tick.
 31e:	80 e7       	ldi	r24, 0x70	; 112
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	92 87       	std	Z+10, r25	; 0x0a
 324:	81 87       	std	Z+9, r24	; 0x09
	
	
	task3.state = SM3_Write;//Task initial state.
 326:	e8 e2       	ldi	r30, 0x28	; 40
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	10 82       	st	Z, r1
	task3.period = SMTick3_period;//Task Period.
 32c:	41 83       	std	Z+1, r20	; 0x01
 32e:	52 83       	std	Z+2, r21	; 0x02
 330:	63 83       	std	Z+3, r22	; 0x03
 332:	74 83       	std	Z+4, r23	; 0x04
	task3.elapsedTime = SMTick3_period;//Task current elapsed time.
 334:	45 83       	std	Z+5, r20	; 0x05
 336:	56 83       	std	Z+6, r21	; 0x06
 338:	67 83       	std	Z+7, r22	; 0x07
 33a:	70 87       	std	Z+8, r23	; 0x08
	task3.TickFct = &SMTick3;//Function pointer for the tick.
 33c:	8c e7       	ldi	r24, 0x7C	; 124
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	92 87       	std	Z+10, r25	; 0x0a
 342:	81 87       	std	Z+9, r24	; 0x09

	task4.state = SM4_Write;//Task initial state.
 344:	ed e1       	ldi	r30, 0x1D	; 29
 346:	f1 e0       	ldi	r31, 0x01	; 1
 348:	10 82       	st	Z, r1
	task4.period = SMTick4_period;//Task Period.
 34a:	41 83       	std	Z+1, r20	; 0x01
 34c:	52 83       	std	Z+2, r21	; 0x02
 34e:	63 83       	std	Z+3, r22	; 0x03
 350:	74 83       	std	Z+4, r23	; 0x04
	task4.elapsedTime = SMTick4_period;//Task current elapsed time.
 352:	45 83       	std	Z+5, r20	; 0x05
 354:	56 83       	std	Z+6, r21	; 0x06
 356:	67 83       	std	Z+7, r22	; 0x07
 358:	70 87       	std	Z+8, r23	; 0x08
	task4.TickFct = &SMTick4;//Function pointer for the tick.
 35a:	8f e8       	ldi	r24, 0x8F	; 143
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	92 87       	std	Z+10, r25	; 0x0a
 360:	81 87       	std	Z+9, r24	; 0x09
	
	task5.state = SM5_Output;//Task initial state.
 362:	e2 e1       	ldi	r30, 0x12	; 18
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	10 82       	st	Z, r1
	task5.period = SMTick5_period;//Task Period.
 368:	41 83       	std	Z+1, r20	; 0x01
 36a:	52 83       	std	Z+2, r21	; 0x02
 36c:	63 83       	std	Z+3, r22	; 0x03
 36e:	74 83       	std	Z+4, r23	; 0x04
	task5.elapsedTime = SMTick5_period;//Task current elapsed time.
 370:	45 83       	std	Z+5, r20	; 0x05
 372:	56 83       	std	Z+6, r21	; 0x06
 374:	67 83       	std	Z+7, r22	; 0x07
 376:	70 87       	std	Z+8, r23	; 0x08
	task5.TickFct = &SMTick5;//Function pointer for the tick.		
 378:	83 ea       	ldi	r24, 0xA3	; 163
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	92 87       	std	Z+10, r25	; 0x0a
 37e:	81 87       	std	Z+9, r24	; 0x09
	
	SPI_ServantInit();
 380:	80 df       	rcall	.-256    	; 0x282 <SPI_ServantInit>
	
	// End of tasks
	//receivedData = 0x11;
	TimerOn();
 382:	1f df       	rcall	.-450    	; 0x1c2 <TimerOn>
 384:	0f 2e       	mov	r0, r31
	unsigned short i; // Scheduler for-loop iterator
    while (1) {
		// Scheduler code
			receivedData = 0x11;
 386:	f1 e1       	ldi	r31, 0x11	; 17
 388:	bf 2e       	mov	r11, r31
 38a:	f0 2d       	mov	r31, r0
 38c:	7e 01       	movw	r14, r28
 38e:	8b e0       	ldi	r24, 0x0B	; 11
 390:	e8 0e       	add	r14, r24
 392:	f1 1c       	adc	r15, r1
 394:	b0 92 49 01 	sts	0x0149, r11	; 0x800149 <receivedData>
 398:	60 ed       	ldi	r22, 0xD0	; 208
			if((receivedData & 0x0F) == 1){TimerSet(2000);}
 39a:	77 e0       	ldi	r23, 0x07	; 7
 39c:	80 e0       	ldi	r24, 0x00	; 0
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ff de       	rcall	.-514    	; 0x1a0 <TimerSet>
 3a2:	de 01       	movw	r26, r28
 3a4:	11 96       	adiw	r26, 0x01	; 1
 3a6:	6d 01       	movw	r12, r26
 3a8:	f6 01       	movw	r30, r12
			else if((receivedData & 0x0F) == 4){TimerSet(250);}
			else if((receivedData & 0x0F) == 5){TimerSet(100);}
			else if((receivedData & 0x0F) == 6){TimerSet(50);}
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 3aa:	01 91       	ld	r16, Z+
 3ac:	11 91       	ld	r17, Z+
 3ae:	6f 01       	movw	r12, r30
 3b0:	d8 01       	movw	r26, r16
 3b2:	15 96       	adiw	r26, 0x05	; 5
 3b4:	4d 91       	ld	r20, X+
 3b6:	5d 91       	ld	r21, X+
 3b8:	6d 91       	ld	r22, X+
 3ba:	7c 91       	ld	r23, X
 3bc:	18 97       	sbiw	r26, 0x08	; 8
 3be:	11 96       	adiw	r26, 0x01	; 1
 3c0:	8d 91       	ld	r24, X+
 3c2:	9d 91       	ld	r25, X+
 3c4:	0d 90       	ld	r0, X+
 3c6:	bc 91       	ld	r27, X
 3c8:	a0 2d       	mov	r26, r0
 3ca:	48 17       	cp	r20, r24
 3cc:	59 07       	cpc	r21, r25
 3ce:	6a 07       	cpc	r22, r26
 3d0:	7b 07       	cpc	r23, r27
 3d2:	81 f4       	brne	.+32     	; 0x3f4 <main+0x142>
 3d4:	f8 01       	movw	r30, r16
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 3d6:	80 81       	ld	r24, Z
 3d8:	01 84       	ldd	r0, Z+9	; 0x09
 3da:	f2 85       	ldd	r31, Z+10	; 0x0a
 3dc:	e0 2d       	mov	r30, r0
 3de:	08 2e       	mov	r0, r24
 3e0:	00 0c       	add	r0, r0
 3e2:	99 0b       	sbc	r25, r25
 3e4:	09 95       	icall
 3e6:	d8 01       	movw	r26, r16
 3e8:	8c 93       	st	X, r24
 3ea:	f8 01       	movw	r30, r16
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 3ec:	15 82       	std	Z+5, r1	; 0x05
 3ee:	16 82       	std	Z+6, r1	; 0x06
 3f0:	17 82       	std	Z+7, r1	; 0x07
 3f2:	10 86       	std	Z+8, r1	; 0x08
 3f4:	f8 01       	movw	r30, r16
			}
			tasks[i]->elapsedTime += 1;
 3f6:	85 81       	ldd	r24, Z+5	; 0x05
 3f8:	96 81       	ldd	r25, Z+6	; 0x06
 3fa:	a7 81       	ldd	r26, Z+7	; 0x07
 3fc:	b0 85       	ldd	r27, Z+8	; 0x08
 3fe:	01 96       	adiw	r24, 0x01	; 1
 400:	a1 1d       	adc	r26, r1
 402:	b1 1d       	adc	r27, r1
 404:	85 83       	std	Z+5, r24	; 0x05
 406:	96 83       	std	Z+6, r25	; 0x06
 408:	a7 83       	std	Z+7, r26	; 0x07
 40a:	b0 87       	std	Z+8, r27	; 0x08
 40c:	ce 14       	cp	r12, r14
			else if((receivedData & 0x0F) == 2){TimerSet(1000);}
			else if((receivedData & 0x0F) == 3){TimerSet(500);}
			else if((receivedData & 0x0F) == 4){TimerSet(250);}
			else if((receivedData & 0x0F) == 5){TimerSet(100);}
			else if((receivedData & 0x0F) == 6){TimerSet(50);}
		for ( i = 0; i < numTasks; i++ ) {
 40e:	df 04       	cpc	r13, r15
 410:	59 f6       	brne	.-106    	; 0x3a8 <main+0xf6>
 412:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <TimerFlag>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 416:	88 23       	and	r24, r24
 418:	e1 f3       	breq	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <TimerFlag>
		TimerFlag = 0;
 41e:	ba cf       	rjmp	.-140    	; 0x394 <main+0xe2>

00000420 <_exit>:
	}
 420:	f8 94       	cli

00000422 <__stop_program>:
 422:	ff cf       	rjmp	.-2      	; 0x422 <__stop_program>
